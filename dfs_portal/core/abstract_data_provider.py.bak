import sys
from os.path import dirname, realpath
root = dirname(dirname(realpath(__file__)))
sys.path.append(root)

# Python core modules
import importlib
import os
import inspect
from ast import literal_eval
from collections import OrderedDict
import pprint

#Pypi modules
import json
from flask import Flask, request, jsonify
#from flask.ext.classy import FlaskView, route
from contracts import contract, new_contract
import pudb
import datetime
from flask.ext.sqlalchemy import SQLAlchemy
from sqlalchemy.exc import IntegrityError
from marshmallow import Schema, fields, ValidationError, pre_load


#from voluptuous import Schema, All, Length, MultipleInvalid, ALLOW_EXTRA
from good import Schema, All, Length, Invalid, MultipleInvalid, Allow, Required, IsFile
from toolz import map, keyfilter, keymap, valmap
from toolz.functoolz import pipe
#Custom modules
#from . import w5_zodb.W5ZODB as W5ZODB
#import w5_zodb as z
from flask.ext.zodb import ZODB, transaction
from nba.utils.htools import tuplify

_currentDir = dirname(os.path.realpath(__file__))

db = SQLAlchemy(app)

##### MODELS #####

class Player(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    first = db.Column(db.String(80))
    last = db.Column(db.String(80))
    team = db.Column(db.String(80))

class Quote(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    content = db.Column(db.String, nullable=False)
    author_id = db.Column(db.Integer, db.ForeignKey("author.id"))
    author = db.relationship("Author",
                        backref=db.backref("quotes", lazy="dynamic"))
    posted_at = db.Column(db.DateTime)

##### SCHEMAS #####

class PlayerSchema(Schema):
    id = fields.Int(dump_only=True)
    first = fields.Str(required=True, validate=must_not_be_blank)
    last = fields.Str(required=True, validate=must_not_be_blank)
    formatted_name = fields.Method("format_name", dump_only=True)
    team = fields.Str(required=True, validate=must_not_be_blank)

    def format_name(self, player):
        return "{} {}".format(player.first, player.last)


# Custom validator
def must_not_be_blank(data):
    if not data:
        raise ValidationError('Data not provided.')

class QuoteSchema(Schema):
    id = fields.Int(dump_only=True)
    author = fields.Nested(AuthorSchema, validate=must_not_be_blank)
    content = fields.Str(required=True, validate=must_not_be_blank)
    posted_at = fields.DateTime(dump_only=True)

    # Allow client to pass author's full name in request body
    # e.g. {"author': 'Tim Peters"} rather than {"first": "Tim", "last": "Peters"}
    @pre_load
    def process_author(self, data):
        author_name = data.get('author')
        if author_name:
            first, last = author_name.split(' ')
            author_dict = dict(first=first, last=last)
        else:
            author_dict = {}
        data['author'] = author_dict
        return data

player_schema = PlayerSchema()
players_schema = PlayerSchema(many=True)
quote_schema = QuoteSchema()
quotes_schema = QuoteSchema(many=True, only=('id', 'content'))

##### API #####

def create_app():
    app = Flask(__name__)
    app.debug = True
    dbPath = os.path.join(_currentDir, 'db', 'mlb.db')
    dbUri = 'sqlite://{}'.format(dbPath)
    app.config["SQLALCHEMY_DATABASE_URI"] = dbUri

    @app.route('/', methods=['GET', 'POST'])
    def index():
        return jsonify({
                "data":"In /",
                "success": True}
                )

    @app.route ('/players')
    def get_players():
        #args = request.args
        #optimizerParams = OrderedDict(sorted(args.items()))
        players = Player.query.all()
        # Serialize the queryset
        result = players_schema.dump(players)
        return jsonify({'players': result.data})

    @app.route("/quotes/", methods=["POST"])
    def new_game_stat_line():
        jsonData = request.args
        jsonData = OrderedDict(sorted(jsonData.items()))
        if not jsonData:
            return jsonify({'message': 'No input data provided'}), 400
        data, errors = stat_line_schema.load(jsonData)
        if errors:
            return jsonify(errors), 422
        first, last = data['player']['first'], data['player']['last']
        team = data['player']['team']
        player = Player.query.filter_by(first=first, last=last, team=team).first()
        if player is None:
            # Create a new player
            player = Player(first=first, last=last, team=team)
    #@app.route ('/rosters')
    #def get_rosters():
        #args = request.args
        #optimizerParams = OrderedDict(sorted(args.items()))
        #payload = p.get_rosters(optimizerParams)
        #return payload
    #@app.route ('/det_rosters')
    #def get_detailed_rosters():
        #args = request.args
        #optimizerParams = OrderedDict(sorted(args.items()))
        #payload = p.get_detailed_rosters(optimizerParams)
        #return payload
    #@app.route ('/amt_players')
    #def get_amount_of_players():
        #args = request.args
        #optimizerParams = OrderedDict(sorted(args.items()))
        #payload = p.get_amount_of_players(optimizerParams)
        #return payload
#
    return app

app = create_app()

if __name__ == '__main__':
    #main('/')
    try:
        #app.debug = True
        #app.run()
        #app.run(host='localhost', port=8000)
        #app = create_app()
        app.run(host='localhost', port=8000)
    finally:
        db.close()
        # your "destruction" code
        pass
